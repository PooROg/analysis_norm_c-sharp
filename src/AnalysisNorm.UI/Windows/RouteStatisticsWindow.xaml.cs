using System.ComponentModel;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using System.Windows;
using System.Windows.Input;
using Microsoft.Extensions.Logging;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using System.Drawing;
using AnalysisNorm.Core.Entities;
using AnalysisNorm.UI.Commands;

namespace AnalysisNorm.UI.Windows;

/// <summary>
/// CHAT 6: Complete Route Statistics Window Implementation
/// –û–∫–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ - –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–æ–≥ Python _show_routes_statistics
/// </summary>
public partial class RouteStatisticsWindow : Window
{
    public RouteStatisticsWindow(RouteStatisticsViewModel viewModel)
    {
        InitializeComponent();
        DataContext = viewModel;
    }

    private void CloseWindow_Click(object sender, RoutedEventArgs e)
    {
        Close();
    }
}

/// <summary>
/// CHAT 6: Complete ViewModel –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
/// –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–æ–≥ Python routes statistics processing + Excel export
/// </summary>
public class RouteStatisticsViewModel : INotifyPropertyChanged
{
    #region –ü–æ–ª—è

    private readonly ILogger<RouteStatisticsViewModel> _logger;
    private readonly List<Route> _routes;
    private readonly string _sectionName;
    private readonly bool _singleSectionOnly;

    private string _generalInfo = string.Empty;
    private string _generalStatistics = string.Empty;
    private string _sectionStatistics = string.Empty;
    private string _locomotiveStatistics = string.Empty;
    private string _deviationStatistics = string.Empty;

    #endregion

    #region –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä

    public RouteStatisticsViewModel(
        ILogger<RouteStatisticsViewModel> logger,
        List<Route> routes,
        string sectionName,
        bool singleSectionOnly = false)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        _routes = routes ?? throw new ArgumentNullException(nameof(routes));
        _sectionName = sectionName;
        _singleSectionOnly = singleSectionOnly;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        ExportCommand = new AsyncCommand<object?>(ExportStatisticsAsync);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        GenerateAllStatistics();

        _logger.LogInformation("–°–æ–∑–¥–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {Count} –º–∞—Ä—à—Ä—É—Ç–æ–≤ —É—á–∞—Å—Ç–∫–∞: {SectionName}", 
            _routes.Count, _sectionName);
    }

    #endregion

    #region Properties

    /// <summary>
    /// –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –∞–Ω–∞–ª–æ–≥ Python general info header
    /// </summary>
    public string GeneralInfo
    {
        get => _generalInfo;
        private set => SetProperty(ref _generalInfo, value);
    }

    /// <summary>
    /// –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –∞–Ω–∞–ª–æ–≥ Python general statistics
    /// </summary>
    public string GeneralStatistics
    {
        get => _generalStatistics;
        private set => SetProperty(ref _generalStatistics, value);
    }

    /// <summary>
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—á–∞—Å—Ç–∫–∞–º - –∞–Ω–∞–ª–æ–≥ Python sections statistics
    /// </summary>
    public string SectionStatistics
    {
        get => _sectionStatistics;
        private set => SetProperty(ref _sectionStatistics, value);
    }

    /// <summary>
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–æ–∫–æ–º–æ—Ç–∏–≤–∞–º - –∞–Ω–∞–ª–æ–≥ Python locomotives statistics
    /// </summary>
    public string LocomotiveStatistics
    {
        get => _locomotiveStatistics;
        private set => SetProperty(ref _locomotiveStatistics, value);
    }

    /// <summary>
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π - –∞–Ω–∞–ª–æ–≥ Python deviations statistics
    /// </summary>
    public string DeviationStatistics
    {
        get => _deviationStatistics;
        private set => SetProperty(ref _deviationStatistics, value);
    }

    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    /// </summary>
    public ICommand ExportCommand { get; }

    #endregion

    #region Private Methods - Generation

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É - –∞–Ω–∞–ª–æ–≥ Python statistics generation
    /// </summary>
    private void GenerateAllStatistics()
    {
        try
        {
            GenerateGeneralInfo();
            GenerateGeneralStatistics();
            GenerateSectionStatistics();
            GenerateLocomotiveStatistics();
            GenerateDeviationStatistics();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
        }
    }

    /// <summary>
    /// –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –∞–Ω–∞–ª–æ–≥ Python general info
    /// </summary>
    private void GenerateGeneralInfo()
    {
        var info = new StringBuilder();
        info.AppendLine($"–£—á–∞—Å—Ç–æ–∫: {_sectionName}");
        info.AppendLine($"–í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {_routes.Count}");
        
        if (_singleSectionOnly)
        {
            info.AppendLine("–§–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ –º–∞—Ä—à—Ä—É—Ç—ã —Å –æ–¥–Ω–∏–º —É—á–∞—Å—Ç–∫–æ–º");
        }
        
        info.AppendLine($"–ü–µ—Ä–∏–æ–¥: {GetDateRange()}");
        info.AppendLine($"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
        
        GeneralInfo = info.ToString();
    }

    /// <summary>
    /// –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –∞–Ω–∞–ª–æ–≥ Python general statistics calculation
    /// </summary>
    private void GenerateGeneralStatistics()
    {
        var stats = new StringBuilder();
        stats.AppendLine("–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê");
        stats.AppendLine("=".PadRight(40, '='));
        stats.AppendLine();

        if (!_routes.Any())
        {
            stats.AppendLine("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
            GeneralStatistics = stats.ToString();
            return;
        }

        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ - –∞–Ω–∞–ª–æ–≥ Python basic statistics
        stats.AppendLine($"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {_routes.Count:N0}");
        stats.AppendLine($"–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏: {_routes.Average(r => r.ElectricConsumption):F2} –∫–í—Ç‚ãÖ—á–∞—Å");
        stats.AppendLine($"–°—Ä–µ–¥–Ω—è—è –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞: {_routes.Average(r => r.MechanicalWork):F2} –∫–í—Ç‚ãÖ—á–∞—Å");
        stats.AppendLine($"–°—Ä–µ–¥–Ω–∏–π —É–¥–µ–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥: {_routes.Average(r => r.SpecificConsumption):F3} –∫–í—Ç‚ãÖ—á–∞—Å/—Ç–∫–º‚ãÖ–∫–º");
        stats.AppendLine();

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π - –∞–Ω–∞–ª–æ–≥ Python deviation statistics
        var avgDeviation = _routes.Average(r => r.DeviationPercent);
        var maxDeviation = _routes.Max(r => r.DeviationPercent);
        var minDeviation = _routes.Min(r => r.DeviationPercent);
        
        stats.AppendLine($"–°—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {avgDeviation:+F2;-F2;0.00}%");
        stats.AppendLine($"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {maxDeviation:+F2;-F2;0.00}%");
        stats.AppendLine($"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {minDeviation:+F2;-F2;0.00}%");
        stats.AppendLine();

        // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏
        var totalDistance = _routes.Sum(r => r.Distance);
        var avgDistance = _routes.Average(r => r.Distance);
        stats.AppendLine($"–û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {totalDistance:F1} –∫–º");
        stats.AppendLine($"–°—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {avgDistance:F1} –∫–º");
        
        var routesWithTime = _routes.Where(r => r.TravelTime.HasValue).ToList();
        if (routesWithTime.Any())
        {
            var avgTime = TimeSpan.FromTicks((long)routesWithTime.Average(r => r.TravelTime!.Value.Ticks));
            stats.AppendLine($"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏: {avgTime:hh\\:mm}");
        }

        GeneralStatistics = stats.ToString();
    }

    /// <summary>
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—á–∞—Å—Ç–∫–∞–º - –∞–Ω–∞–ª–æ–≥ Python sections analysis
    /// </summary>
    private void GenerateSectionStatistics()
    {
        var stats = new StringBuilder();
        stats.AppendLine("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –£–ß–ê–°–¢–ö–ê–ú");
        stats.AppendLine("=".PadRight(40, '='));
        stats.AppendLine();

        var sectionGroups = _routes
            .SelectMany(r => r.SectionNames.Select(s => new { Section = s, Route = r }))
            .GroupBy(x => x.Section)
            .OrderByDescending(g => g.Count())
            .ToList();

        foreach (var group in sectionGroups.Take(10)) // –¢–æ–ø 10 —É—á–∞—Å—Ç–∫–æ–≤
        {
            var routes = group.Select(x => x.Route).ToList();
            var avgDeviation = routes.Average(r => r.DeviationPercent);
            
            stats.AppendLine($"üìç {group.Key}:");
            stats.AppendLine($"   –ú–∞—Ä—à—Ä—É—Ç–æ–≤: {routes.Count}");
            stats.AppendLine($"   –°—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {avgDeviation:+F1;-F1;0.0}%");
            stats.AppendLine($"   –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥: {routes.Average(r => r.ElectricConsumption):F0} –∫–í—Ç‚ãÖ—á–∞—Å");
            stats.AppendLine();
        }

        if (sectionGroups.Count > 10)
        {
            stats.AppendLine($"... –∏ –µ—â–µ {sectionGroups.Count - 10} —É—á–∞—Å—Ç–∫–æ–≤");
        }

        SectionStatistics = stats.ToString();
    }

    /// <summary>
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–æ–∫–æ–º–æ—Ç–∏–≤–∞–º - –∞–Ω–∞–ª–æ–≥ Python locomotives analysis
    /// </summary>
    private void GenerateLocomotiveStatistics()
    {
        var stats = new StringBuilder();
        stats.AppendLine("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –õ–û–ö–û–ú–û–¢–ò–í–ê–ú");
        stats.AppendLine("=".PadRight(40, '='));
        stats.AppendLine();

        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–µ—Ä–∏—è–º - –∞–Ω–∞–ª–æ–≥ Python locomotive grouping
        var seriesGroups = _routes
            .Where(r => !string.IsNullOrEmpty(r.LocomotiveSeries))
            .GroupBy(r => r.LocomotiveSeries!)
            .OrderByDescending(g => g.Count())
            .ToList();

        stats.AppendLine($"–í—Å–µ–≥–æ —Å–µ—Ä–∏–π –ª–æ–∫–æ–º–æ—Ç–∏–≤–æ–≤: {seriesGroups.Count}");
        stats.AppendLine();

        foreach (var group in seriesGroups.Take(15)) // –¢–æ–ø 15 —Å–µ—Ä–∏–π
        {
            var avgDeviation = group.Average(r => r.DeviationPercent);
            var locomotiveCount = group.Select(r => r.LocomotiveNumber).Distinct().Count();
            
            stats.AppendLine($"üöÇ –°–µ—Ä–∏—è {group.Key}:");
            stats.AppendLine($"   –ú–∞—Ä—à—Ä—É—Ç–æ–≤: {group.Count()}");
            stats.AppendLine($"   –õ–æ–∫–æ–º–æ—Ç–∏–≤–æ–≤: {locomotiveCount}");
            stats.AppendLine($"   –°—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {avgDeviation:+F1;-F1;0.0}%");
            stats.AppendLine($"   –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥: {group.Average(r => r.ElectricConsumption):F0} –∫–í—Ç‚ãÖ—á–∞—Å");
            stats.AppendLine();
        }

        LocomotiveStatistics = stats.ToString();
    }

    /// <summary>
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π - –∞–Ω–∞–ª–æ–≥ Python deviations categorization
    /// </summary>
    private void GenerateDeviationStatistics()
    {
        var stats = new StringBuilder();
        stats.AppendLine("–ê–ù–ê–õ–ò–ó –û–¢–ö–õ–û–ù–ï–ù–ò–ô –û–¢ –ù–û–†–ú");
        stats.AppendLine("=".PadRight(40, '='));
        stats.AppendLine();

        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π - –∞–Ω–∞–ª–æ–≥ Python deviation categories
        var categories = new[]
        {
            ("–°–∏–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è (< -15%)", _routes.Count(r => r.DeviationPercent < -15)),
            ("–°—Ä–µ–¥–Ω—è—è —ç–∫–æ–Ω–æ–º–∏—è (-15% –¥–æ -10%)", _routes.Count(r => r.DeviationPercent >= -15 && r.DeviationPercent < -10)),
            ("–°–ª–∞–±–∞—è —ç–∫–æ–Ω–æ–º–∏—è (-10% –¥–æ -5%)", _routes.Count(r => r.DeviationPercent >= -10 && r.DeviationPercent < -5)),
            ("–í –Ω–æ—Ä–º–µ (-5% –¥–æ +5%)", _routes.Count(r => Math.Abs(r.DeviationPercent) <= 5)),
            ("–°–ª–∞–±—ã–π –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ (+5% –¥–æ +10%)", _routes.Count(r => r.DeviationPercent > 5 && r.DeviationPercent <= 10)),
            ("–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ (+10% –¥–æ +15%)", _routes.Count(r => r.DeviationPercent > 10 && r.DeviationPercent <= 15)),
            ("–°–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ (> +15%)", _routes.Count(r => r.DeviationPercent > 15))
        };

        foreach (var (category, count) in categories)
        {
            var percentage = _routes.Count > 0 ? (double)count / _routes.Count * 100 : 0;
            var icon = GetCategoryIcon(category);
            
            stats.AppendLine($"{icon} {category}:");
            stats.AppendLine($"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count} ({percentage:F1}%)");
            stats.AppendLine();
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - –∞–Ω–∞–ª–æ–≥ Python additional insights
        var economyRoutes = _routes.Count(r => r.DeviationPercent < -5);
        var overrunRoutes = _routes.Count(r => r.DeviationPercent > 5);
        var normalRoutes = _routes.Count(r => Math.Abs(r.DeviationPercent) <= 5);

        stats.AppendLine("–°–í–û–î–ö–ê:");
        stats.AppendLine($"‚úÖ –≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã: {economyRoutes} ({(double)economyRoutes / _routes.Count * 100:F1}%)");
        stats.AppendLine($"‚ö†Ô∏è  –ù–µ—ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã: {overrunRoutes} ({(double)overrunRoutes / _routes.Count * 100:F1}%)");
        stats.AppendLine($"üìä –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã: {normalRoutes} ({(double)normalRoutes / _routes.Count * 100:F1}%)");

        DeviationStatistics = stats.ToString();
    }

    #endregion

    #region Export Implementation - CHAT 6 Complete

    /// <summary>
    /// CHAT 6: –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ - –∞–Ω–∞–ª–æ–≥ Python export functionality
    /// </summary>
    private async Task ExportStatisticsAsync(object? parameter)
    {
        try
        {
            var dialog = new Microsoft.Win32.SaveFileDialog
            {
                Title = "–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                Filter = "Excel —Ñ–∞–π–ª—ã (*.xlsx)|*.xlsx|–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (*.txt)|*.txt",
                DefaultExt = "xlsx",
                FileName = $"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_{_sectionName?.Replace(" ", "_")}_{DateTime.Now:yyyyMMdd_HHmmss}"
            };

            if (dialog.ShowDialog() == true)
            {
                await ExportToFile(dialog.FileName);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
            MessageBox.Show(
                $"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {ex.Message}",
                "–û—à–∏–±–∫–∞",
                MessageBoxButton.OK,
                MessageBoxImage.Error
            );
        }
    }

    /// <summary>
    /// –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–∞–π–ª - –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
    /// </summary>
    private async Task ExportToFile(string filePath)
    {
        await Task.Run(() =>
        {
            try
            {
                var extension = Path.GetExtension(filePath).ToLower();
                
                if (extension == ".xlsx")
                {
                    ExportToExcel(filePath);
                }
                else
                {
                    ExportToText(filePath);
                }

                System.Windows.Application.Current.Dispatcher.Invoke(() =>
                {
                    MessageBox.Show(
                        $"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞:\n{filePath}",
                        "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω",
                        MessageBoxButton.OK,
                        MessageBoxImage.Information
                    );
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
                throw;
            }
        });
    }

    /// <summary>
    /// CHAT 6: –ó–ê–í–ï–†–®–ï–ù–ê - –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel —á–µ—Ä–µ–∑ EPPlus
    /// </summary>
    private void ExportToExcel(string filePath)
    {
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

        using var package = new ExcelPackage();
        
        // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã
        CreateSummarySheet(package);
        CreateDetailedStatisticsSheet(package);
        CreateRoutesDataSheet(package);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        package.SaveAs(new FileInfo(filePath));
        
        _logger.LogInformation("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ Excel: {FilePath}", filePath);
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç —Å–≤–æ–¥–∫–∏
    /// </summary>
    private void CreateSummarySheet(ExcelPackage package)
    {
        var worksheet = package.Workbook.Worksheets.Add("–°–≤–æ–¥–∫–∞");
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        worksheet.Cells[1, 1].Value = $"–°–í–û–î–ö–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò: {_sectionName}";
        worksheet.Cells[1, 1].Style.Font.Size = 16;
        worksheet.Cells[1, 1].Style.Font.Bold = true;
        
        // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        int row = 3;
        var infoLines = GeneralInfo.Split(Environment.NewLine, StringSplitOptions.RemoveEmptyEntries);
        foreach (var line in infoLines)
        {
            var parts = line.Split(':', 2);
            if (parts.Length == 2)
            {
                worksheet.Cells[row, 1].Value = parts[0].Trim();
                worksheet.Cells[row, 2].Value = parts[1].Trim();
                worksheet.Cells[row, 1].Style.Font.Bold = true;
            }
            row++;
        }

        // –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        row += 2;
        worksheet.Cells[row, 1].Value = "–ö–õ–Æ–ß–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò";
        worksheet.Cells[row, 1].Style.Font.Bold = true;
        worksheet.Cells[row, 1].Style.Font.Size = 14;
        row++;

        if (_routes.Any())
        {
            var metrics = new[]
            {
                ("–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥", $"{_routes.Average(r => r.ElectricConsumption):F2} –∫–í—Ç‚ãÖ—á–∞—Å"),
                ("–°—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", $"{_routes.Average(r => r.DeviationPercent):+F2;-F2;0.00}%"),
                ("–≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã", $"{_routes.Count(r => r.DeviationPercent < -5)} ({_routes.Count(r => r.DeviationPercent < -5) * 100.0 / _routes.Count:F1}%)"),
                ("–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥", $"{_routes.Count(r => r.DeviationPercent > 5)} ({_routes.Count(r => r.DeviationPercent > 5) * 100.0 / _routes.Count:F1}%)")
            };

            foreach (var (metric, value) in metrics)
            {
                worksheet.Cells[row, 1].Value = metric;
                worksheet.Cells[row, 2].Value = value;
                worksheet.Cells[row, 1].Style.Font.Bold = true;
                row++;
            }
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        worksheet.Cells.AutoFitColumns(0);
        worksheet.Cells[1, 1, row, 2].Style.Border.BorderAround(OfficeOpenXml.Style.ExcelBorderStyle.Thin);
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    /// </summary>
    private void CreateDetailedStatisticsSheet(ExcelPackage package)
    {
        var worksheet = package.Workbook.Worksheets.Add("–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");
        
        int row = 1;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        var sections = new[]
        {
            ("–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê", GeneralStatistics),
            ("–ü–û –£–ß–ê–°–¢–ö–ê–ú", SectionStatistics),
            ("–ü–û –õ–û–ö–û–ú–û–¢–ò–í–ê–ú", LocomotiveStatistics),
            ("–ê–ù–ê–õ–ò–ó –û–¢–ö–õ–û–ù–ï–ù–ò–ô", DeviationStatistics)
        };

        foreach (var (title, content) in sections)
        {
            worksheet.Cells[row, 1].Value = title;
            worksheet.Cells[row, 1].Style.Font.Bold = true;
            worksheet.Cells[row, 1].Style.Font.Size = 14;
            row += 2;
            
            var lines = content.Split(Environment.NewLine, StringSplitOptions.None);
            foreach (var line in lines)
            {
                worksheet.Cells[row, 1].Value = line;
                if (line.Contains(":"))
                {
                    worksheet.Cells[row, 1].Style.Font.Bold = true;
                }
                row++;
            }
            row += 2;
        }
        
        worksheet.Cells.AutoFitColumns(0);
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    /// </summary>
    private void CreateRoutesDataSheet(ExcelPackage package)
    {
        var worksheet = package.Workbook.Worksheets.Add("–î–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤");
        
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏
        var headers = new[] { "‚Ññ –ú–∞—Ä—à—Ä—É—Ç–∞", "–î–∞—Ç–∞", "–£—á–∞—Å—Ç–∫–∏", "–õ–æ–∫–æ–º–æ—Ç–∏–≤", "–†–∞—Å—Ö–æ–¥ —Ñ–∞–∫—Ç", "–†–∞—Å—Ö–æ–¥ –Ω–æ—Ä–º–∞", "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ %", "–°—Ç–∞—Ç—É—Å" };
        for (int i = 0; i < headers.Length; i++)
        {
            worksheet.Cells[1, i + 1].Value = headers[i];
            worksheet.Cells[1, i + 1].Style.Font.Bold = true;
            worksheet.Cells[1, i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
            worksheet.Cells[1, i + 1].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
        }

        // –î–∞–Ω–Ω—ã–µ
        for (int i = 0; i < _routes.Count; i++)
        {
            var route = _routes[i];
            var row = i + 2;
            
            worksheet.Cells[row, 1].Value = route.RouteNumber;
            worksheet.Cells[row, 2].Value = route.Date.ToString("yyyy-MM-dd");
            worksheet.Cells[row, 3].Value = string.Join(", ", route.SectionNames);
            worksheet.Cells[row, 4].Value = $"{route.LocomotiveSeries} {route.LocomotiveNumber}";
            worksheet.Cells[row, 5].Value = route.ElectricConsumption;
            worksheet.Cells[row, 6].Value = route.NormConsumption;
            worksheet.Cells[row, 7].Value = route.DeviationPercent;
            worksheet.Cells[row, 8].Value = GetDeviationCategory(route.DeviationPercent);
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            worksheet.Cells[row, 5].Style.Numberformat.Format = "#,##0.0";
            worksheet.Cells[row, 6].Style.Numberformat.Format = "#,##0.0";
            worksheet.Cells[row, 7].Style.Numberformat.Format = "+0.0%;-0.0%;0.0%";
            
            // –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é
            var color = GetDeviationRowColor(route.DeviationPercent);
            if (color != Color.Transparent)
            {
                for (int col = 1; col <= headers.Length; col++)
                {
                    worksheet.Cells[row, col].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[row, col].Style.Fill.BackgroundColor.SetColor(color);
                }
            }
        }
        
        worksheet.Cells.AutoFitColumns(0);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        var dataRange = worksheet.Cells[1, 1, _routes.Count + 1, headers.Length];
        dataRange.Style.Border.Top.Style = ExcelBorderStyle.Thin;
        dataRange.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
        dataRange.Style.Border.Left.Style = ExcelBorderStyle.Thin;
        dataRange.Style.Border.Right.Style = ExcelBorderStyle.Thin;
    }

    /// <summary>
    /// –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª - –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç
    /// </summary>
    private void ExportToText(string filePath)
    {
        var content = new StringBuilder();
        content.AppendLine(GeneralInfo);
        content.AppendLine();
        content.AppendLine(GeneralStatistics);
        content.AppendLine();
        content.AppendLine(SectionStatistics);
        content.AppendLine();
        content.AppendLine(LocomotiveStatistics);
        content.AppendLine();
        content.AppendLine(DeviationStatistics);
        
        File.WriteAllText(filePath, content.ToString(), Encoding.UTF8);
    }

    #endregion

    #region Helper Methods

    /// <summary>
    /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
    /// </summary>
    private string GetDateRange()
    {
        if (!_routes.Any()) return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö";
        
        var minDate = _routes.Min(r => r.Date);
        var maxDate = _routes.Max(r => r.Date);
        
        return minDate.Date == maxDate.Date 
            ? minDate.ToString("yyyy-MM-dd") 
            : $"{minDate:yyyy-MM-dd} ‚Äî {maxDate:yyyy-MM-dd}";
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    /// </summary>
    private string GetCategoryIcon(string category)
    {
        return category switch
        {
            var c when c.Contains("–°–∏–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è") => "üíö",
            var c when c.Contains("–°—Ä–µ–¥–Ω—è—è —ç–∫–æ–Ω–æ–º–∏—è") => "üü¢",
            var c when c.Contains("–°–ª–∞–±–∞—è —ç–∫–æ–Ω–æ–º–∏—è") => "üü°",
            var c when c.Contains("–í –Ω–æ—Ä–º–µ") => "üîµ",
            var c when c.Contains("–°–ª–∞–±—ã–π –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥") => "üü†",
            var c when c.Contains("–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥") => "üî¥",
            var c when c.Contains("–°–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥") => "üö®",
            _ => "üìä"
        };
    }

    /// <summary>
    /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è Excel
    /// </summary>
    private string GetDeviationCategory(double deviationPercent)
    {
        return deviationPercent switch
        {
            < -15 => "–°–∏–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è",
            < -10 => "–°—Ä–µ–¥–Ω—è—è —ç–∫–æ–Ω–æ–º–∏—è",
            < -5 => "–°–ª–∞–±–∞—è —ç–∫–æ–Ω–æ–º–∏—è",
            >= -5 and <= 5 => "–í –Ω–æ—Ä–º–µ",
            > 5 and <= 10 => "–°–ª–∞–±—ã–π –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥",
            > 10 and <= 15 => "–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥",
            _ => "–°–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥"
        };
    }

    /// <summary>
    /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç —Å—Ç—Ä–æ–∫–∏ –ø–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é
    /// </summary>
    private Color GetDeviationRowColor(double deviationPercent)
    {
        return deviationPercent switch
        {
            < -15 => Color.FromArgb(200, 0, 100, 0),    // –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π
            < -5 => Color.FromArgb(200, 144, 238, 144),  // –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
            >= -5 and <= 5 => Color.Transparent,        // –ë–µ–∑ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
            > 5 and <= 15 => Color.FromArgb(200, 255, 165, 0),  // –û—Ä–∞–Ω–∂–µ–≤—ã–π
            _ => Color.FromArgb(200, 220, 20, 60)        // –ö—Ä–∞—Å–Ω—ã–π
        };
    }

    #endregion

    #region INotifyPropertyChanged

    public event PropertyChangedEventHandler? PropertyChanged;

    protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string? propertyName = null)
    {
        if (EqualityComparer<T>.Default.Equals(field, value)) return false;
        field = value;
        OnPropertyChanged(propertyName);
        return true;
    }

    #endregion
}