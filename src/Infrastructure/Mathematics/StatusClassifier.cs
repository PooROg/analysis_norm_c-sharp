// Infrastructure/Mathematics/StatusClassifier.cs
using AnalysisNorm.Models.Domain;

namespace AnalysisNorm.Infrastructure.Mathematics;

/// <summary>
/// –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –Ω–æ—Ä–º
/// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
/// </summary>
public static class StatusClassifier
{
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≥—Ä–∞–Ω–∏—Ü –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç Python –≤–µ—Ä—Å–∏–∏)
    private const decimal ExcellentThreshold = 5m;
    private const decimal GoodThreshold = 10m;
    private const decimal AcceptableThreshold = 20m;
    private const decimal PoorThreshold = 30m;

    /// <summary>
    /// –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
    /// </summary>
    /// <param name="deviationPercent">–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º)</param>
    /// <returns>–°—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è</returns>
    public static DeviationStatus ClassifyDeviation(decimal deviationPercent)
    {
        var absDeviation = Math.Abs(deviationPercent);
        
        return absDeviation switch
        {
            <= ExcellentThreshold => DeviationStatus.Excellent,
            <= GoodThreshold => DeviationStatus.Good,
            <= AcceptableThreshold => DeviationStatus.Acceptable,
            <= PoorThreshold => DeviationStatus.Poor,
            _ => DeviationStatus.Critical
        };
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ (–¥–ª—è UI)
    /// </summary>
    /// <param name="status">–°—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è</param>
    /// <returns>–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</returns>
    public static string GetStatusColor(DeviationStatus status)
    {
        return status switch
        {
            DeviationStatus.Excellent => "#2E7D32",      // –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π
            DeviationStatus.Good => "#4CAF50",           // –ó–µ–ª–µ–Ω—ã–π
            DeviationStatus.Acceptable => "#FF9800",     // –û—Ä–∞–Ω–∂–µ–≤—ã–π
            DeviationStatus.Poor => "#F44336",           // –ö—Ä–∞—Å–Ω—ã–π
            DeviationStatus.Critical => "#B71C1C",       // –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
            _ => "#9E9E9E"                               // –°–µ—Ä—ã–π
        };
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    /// </summary>
    /// <param name="status">–°—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è</param>
    /// <returns>–¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</returns>
    public static string GetStatusDescription(DeviationStatus status)
    {
        return status switch
        {
            DeviationStatus.Excellent => "–û—Ç–ª–∏—á–Ω–æ",
            DeviationStatus.Good => "–•–æ—Ä–æ—à–æ",
            DeviationStatus.Acceptable => "–ü—Ä–∏–µ–º–ª–µ–º–æ",
            DeviationStatus.Poor => "–ü–ª–æ—Ö–æ",
            DeviationStatus.Critical => "–ö—Ä–∏—Ç–∏—á–Ω–æ",
            _ => "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        };
    }

    /// <summary>
    /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    /// </summary>
    /// <param name="status">–°—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è</param>
    /// <returns>True, –µ—Å–ª–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—è</returns>
    public static bool RequiresCorrectiveAction(DeviationStatus status)
    {
        return status is DeviationStatus.Poor or DeviationStatus.Critical;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
    /// </summary>
    /// <param name="status">–°—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è</param>
    /// <returns>Unicode —Å–∏–º–≤–æ–ª –∏–∫–æ–Ω–∫–∏</returns>
    public static string GetStatusIcon(DeviationStatus status)
    {
        return status switch
        {
            DeviationStatus.Excellent => "‚úÖ",
            DeviationStatus.Good => "‚úÖ",
            DeviationStatus.Acceptable => "‚ö†Ô∏è",
            DeviationStatus.Poor => "‚ùå",
            DeviationStatus.Critical => "üî¥",
            _ => "‚ùî"
        };
    }

    /// <summary>
    /// –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    /// </summary>
    /// <param name="deviations">–ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π</param>
    /// <returns>–°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏</returns>
    public static DeviationStatistics ClassifyMultiple(IEnumerable<decimal> deviations)
    {
        var statusCounts = new Dictionary<DeviationStatus, int>
        {
            { DeviationStatus.Excellent, 0 },
            { DeviationStatus.Good, 0 },
            { DeviationStatus.Acceptable, 0 },
            { DeviationStatus.Poor, 0 },
            { DeviationStatus.Critical, 0 }
        };

        var totalCount = 0;
        var worstStatus = DeviationStatus.Excellent;

        foreach (var deviation in deviations)
        {
            var status = ClassifyDeviation(deviation);
            statusCounts[status]++;
            totalCount++;

            if (status > worstStatus)
                worstStatus = status;
        }

        var criticalPercentage = totalCount > 0 
            ? (decimal)(statusCounts[DeviationStatus.Critical] + statusCounts[DeviationStatus.Poor]) / totalCount * 100 
            : 0;

        return new DeviationStatistics
        {
            StatusCounts = statusCounts,
            TotalCount = totalCount,
            WorstStatus = worstStatus,
            CriticalPercentage = criticalPercentage,
            RequiresAttention = criticalPercentage > 10 // –ë–æ–ª–µ–µ 10% –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
        };
    }
}

/// <summary>
/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
/// </summary>
public record DeviationStatistics
{
    public Dictionary<DeviationStatus, int> StatusCounts { get; init; } = new();
    public int TotalCount { get; init; }
    public DeviationStatus WorstStatus { get; init; }
    public decimal CriticalPercentage { get; init; }
    public bool RequiresAttention { get; init; }
}