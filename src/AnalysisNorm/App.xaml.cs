// App.xaml.cs - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –¥–ª—è .NET 9
using System;
using System.IO;
using System.Threading.Tasks;
using System.Windows;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Serilog;
using AnalysisNorm.Services.DependencyInjection;

namespace AnalysisNorm;

/// <summary>
/// –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è .NET 9 —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π DI
/// –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –æ—à–∏–±–∫—É FileNotFoundException
/// </summary>
public partial class App : Application
{
    private IHost? _host;
    private Microsoft.Extensions.Logging.ILogger? _logger;

    /// <summary>
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    /// </summary>
    protected override async void OnStartup(StartupEventArgs e)
    {
        try
        {
            // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Serilog –î–û —Å–æ–∑–¥–∞–Ω–∏—è —Ö–æ—Å—Ç–∞
            InitializeSerilog();

            // –°–æ–∑–¥–∞–µ–º —Ö–æ—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π DI
            _host = CreateHostBuilder(e.Args).Build();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ö–æ—Å—Ç
            await _host.StartAsync();
            
            // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä Microsoft.Extensions.Logging
            _logger = _host.Services.GetRequiredService<Microsoft.Extensions.Logging.ILogger<App>>();
            _logger.LogInformation("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ AnalysisNorm v1.3.4 –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");

            // –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            await InitializeApplicationAsync();

            // –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
            await CreateMainWindowAsync();

            base.OnStartup(e);
        }
        catch (Exception ex)
        {
            // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞
            HandleStartupError(ex);
        }
    }

    /// <summary>
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Serilog –î–û —Å–æ–∑–¥–∞–Ω–∏—è —Ö–æ—Å—Ç–∞
    /// </summary>
    private static void InitializeSerilog()
    {
        var baseDir = AppDomain.CurrentDomain.BaseDirectory;
        var logsDir = Path.Combine(baseDir, "Logs");
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        Directory.CreateDirectory(logsDir);

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º Serilog —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        Log.Logger = new LoggerConfiguration()
            .MinimumLevel.Information()
            .MinimumLevel.Override("Microsoft", Serilog.Events.LogEventLevel.Warning)
            .MinimumLevel.Override("System", Serilog.Events.LogEventLevel.Warning)
            .Enrich.FromLogContext()
            .Enrich.WithProperty("Application", "AnalysisNorm")
            .Enrich.WithProperty("Version", "1.3.4.0")
            .WriteTo.Console(
                outputTemplate: "[{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj}{NewLine}{Exception}")
            .WriteTo.File(
                Path.Combine(logsDir, "analysisnorm-.log"),
                rollingInterval: RollingInterval.Day,
                retainedFileCountLimit: 7,
                outputTemplate: "[{Timestamp:yyyy-MM-dd HH:mm:ss.fff} {Level:u3}] {Message:lj}{NewLine}{Exception}")
            .CreateLogger();

        Log.Information("üöÄ Serilog –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–Ω–∏–µ —Ö–æ—Å—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π DI
    /// </summary>
    private static IHostBuilder CreateHostBuilder(string[] args)
    {
        return Host.CreateDefaultBuilder(args)
            .UseContentRoot(AppDomain.CurrentDomain.BaseDirectory)
            .ConfigureAppConfiguration((context, config) =>
            {
                // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                config.Sources.Clear();
                
                var baseDir = AppDomain.CurrentDomain.BaseDirectory;
                
                // –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                var appSettingsPath = Path.Combine(baseDir, "appsettings.json");
                config.AddJsonFile(appSettingsPath, optional: true, reloadOnChange: true);
                
                // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                config.AddEnvironmentVariables("ANALYSISNORM_");
                
                // –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                if (args.Length > 0)
                {
                    config.AddCommandLine(args);
                }

                Log.Information("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑: {Path}", appSettingsPath);
            })
            .ConfigureServices((context, services) =>
            {
                try
                {
                    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
                    services.AddAnalysisNormServices(context.Configuration);
                    
                    Log.Information("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ");
                }
                catch (Exception ex)
                {
                    Log.Fatal(ex, "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤");
                    throw;
                }
            })
            .UseSerilog(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Serilog –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    }

    /// <summary>
    /// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    /// </summary>
    protected override async void OnExit(ExitEventArgs e)
    {
        try
        {
            _logger?.LogInformation("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ö–æ—Å—Ç
            if (_host != null)
            {
                await _host.StopAsync(TimeSpan.FromSeconds(5));
                _host.Dispose();
            }

            // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            await CleanupResourcesAsync();

            _logger?.LogInformation("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
        }
        catch (Exception ex)
        {
            Log.Error(ex, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
        }
        finally
        {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º Serilog
            Log.CloseAndFlush();
            base.OnExit(e);
        }
    }

    /// <summary>
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    /// </summary>
    private async Task InitializeApplicationAsync()
    {
        try
        {
            _logger?.LogInformation("üîß –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            await EnsureDirectoriesExistAsync();

            // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã
            await PerformHealthChecksAsync();

            _logger?.LogInformation("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
            throw;
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    /// </summary>
    private async Task EnsureDirectoriesExistAsync()
    {
        await Task.Run(() =>
        {
            var baseDir = AppDomain.CurrentDomain.BaseDirectory;
            var directories = new[]
            {
                Path.Combine(baseDir, "Logs"),
                Path.Combine(baseDir, "Config"),
                Path.Combine(baseDir, "Exports"),
                Path.Combine(baseDir, "SampleData"),
                Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "AnalysisNorm"),
                Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "AnalysisNorm", "Exports"),
                Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "AnalysisNorm"),
                Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "AnalysisNorm", "Logs")
            };

            foreach (var directory in directories)
            {
                try
                {
                    if (!Directory.Exists(directory))
                    {
                        Directory.CreateDirectory(directory);
                        _logger?.LogDebug("üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {Directory}", directory);
                    }
                }
                catch (Exception ex)
                {
                    _logger?.LogWarning(ex, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {Directory}", directory);
                }
            }
        });
    }

    /// <summary>
    /// –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
    /// </summary>
    private async Task PerformHealthChecksAsync()
    {
        await Task.Run(() =>
        {
            try
            {
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏
                var memoryBefore = GC.GetTotalMemory(false);
                _logger?.LogDebug("üíæ –î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å: {Memory} –±–∞–π—Ç", memoryBefore);

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ .NET
                var runtimeVersion = Environment.Version;
                _logger?.LogDebug("üîß –í–µ—Ä—Å–∏—è .NET: {Version}", runtimeVersion);

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                var workingDir = Environment.CurrentDirectory;
                _logger?.LogDebug("üìÇ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {Directory}", workingDir);

                _logger?.LogInformation("‚úÖ –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
            }
            catch (Exception ex)
            {
                _logger?.LogWarning(ex, "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã");
            }
        });
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
    /// </summary>
    private async Task CreateMainWindowAsync()
    {
        // –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ UI –ø–æ—Ç–æ–∫–µ
        await Dispatcher.InvokeAsync(() =>
        {
            try
            {
                // –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
                var mainWindow = new MainWindow();

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
                MainWindow = mainWindow;

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ
                mainWindow.Show();

                _logger?.LogInformation("ü™ü –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ");
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞");
                throw;
            }
        });
    }

    /// <summary>
    /// –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    /// </summary>
    private async Task CleanupResourcesAsync()
    {
        await Task.Run(() =>
        {
            try
            {
                _logger?.LogInformation("üßπ –ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤");

                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
                GC.Collect();
                GC.WaitForPendingFinalizers();
                GC.Collect();

                _logger?.LogInformation("‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤");
            }
        });
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∑–∞–ø—É—Å–∫–∞
    /// </summary>
    private void HandleStartupError(Exception ex)
    {
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –≤ —Ñ–∞–π–ª
        try
        {
            var logPath = Path.Combine(
                Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData),
                "AnalysisNorm", "Logs", "startup_errors.log"
            );
            
            Directory.CreateDirectory(Path.GetDirectoryName(logPath)!);
            
            var errorMessage = $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê:\n{ex}\n\n";
            File.AppendAllText(logPath, errorMessage);
        }
        catch
        {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        var message = $"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n\n{ex.Message}\n\n" +
                     $"–í–µ—Ä—Å–∏—è —Å–±–æ—Ä–∫–∏: 1.3.4.0\n" +
                     $"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª –ª–æ–≥–æ–≤.\n\n" +
                     $"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n" +
                     $"1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n" +
                     $"2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n" +
                     $"3. –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n" +
                     $"–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–∞–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.";

        MessageBox.Show(message, "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ AnalysisNorm v1.3.4", 
            MessageBoxButton.OK, MessageBoxImage.Error);

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        Environment.Exit(1);
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ)
    /// </summary>
    public static T? GetService<T>() where T : class
    {
        return (Current as App)?._host?.Services?.GetService<T>();
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    /// </summary>
    public static T GetRequiredService<T>() where T : class
    {
        return (Current as App)?._host?.Services?.GetRequiredService<T>() 
               ?? throw new InvalidOperationException($"‚ùå –°–µ—Ä–≤–∏—Å {typeof(T).Name} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ");
    }
}